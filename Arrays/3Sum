class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans= new ArrayList<>();
        //Set<List<Integer>> st=new HashSet<>();
        int n=nums.length;

        // for (int i = 0; i < n; i++) {
        //     for (int j = i + 1; j < n; j++) {
        //         for (int k = j + 1; k < n; k++)
        //         {
        //             if(nums[i]+nums[j]+nums[k]==0)
        //             {
        //                  List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k]);
        //                  temp.sort(null);
        //                  st.add(temp);
        //             }
        //         }
        //         }
        //         }
        //         ans.addAll(st);
        //         return ans;


        //better approach
        // for(int i=0;i<n;i++)
        // {
        //     HashSet<Integer> hashset=new HashSet<>();
        //     for(int j=i+1;j<n;j++)
        //     {
        //         int third=-(nums[i]+nums[j]);

        //         if(hashset.contains(third))
        //         {
        //             List<Integer> temp= Arrays.asList(nums[i],nums[j],third);
        //             temp.sort(null);
        //             st.add(temp);
        //         }
        //         hashset.add(nums[j]);
        //     }       
        //  }

        //  ans.addAll(st);
        //  return ans;

        //optimal approach

        for(int i=0;i<n;i++)
        {
            if(i!=0 && nums[i]==nums[i-1])
            {
                continue;
            }
            int j=i+1;
            int k=n-1;
            while(j<k)
            {
                int sum=nums[i]+nums[j]+nums[k];
                if(sum<0)
                {
                    j++;
                }
                else if(sum>0)
                {
                    k--;
                }
                else
                {
                    List<Integer> temp=Arrays.asList(nums[i],nums[j],nums[k]);
                    ans.add(temp);
                    j++;
                    k--;
                    while(j<k && nums[j]==nums[j-1])  //skipping the duplicates
                    {
                     j++;
                    }
                    while(j<k && nums[k]==nums[k+1] )
                    {
                        k--;
                    }
               }
            }
        }
        return ans;



    }
    }
